plugins {
    alias(libs.plugins.convention.application)
    alias(libs.plugins.convention.application.buildtype)
    alias(libs.plugins.convention.application.compose)
    alias(libs.plugins.convention.application.jacoco)
    alias(libs.plugins.convention.application.lint)
    alias(libs.plugins.convention.application.test)
    alias(libs.plugins.convention.hilt)
    alias(libs.plugins.ksp)
}

def isGoogleServicesExists = file("google-services.json").exists()

if (isGoogleServicesExists) {
    plugins.apply(libs.plugins.gms.get().pluginId)
    plugins.apply(libs.plugins.firebase.appdistribution.get().pluginId)
    plugins.apply(libs.plugins.firebase.crashlytics.get().pluginId)
}

def getProperties(String properties) {
    def keystorePropertiesFile = rootProject.file(properties)
    def keystoreProperties = new Properties()
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    return keystoreProperties
}

def isReleaseKeystoreExists = rootProject.file("upload.jks").exists()

android {
    defaultConfig {
        applicationId "com.yugyd.quiz"
        versionCode 45
        versionName "1.1.0"

        // Replace with your resource
        buildConfigField 'String', 'DEV_ID', '\"6210589965533125989\"'
        buildConfigField 'String', 'STORE_PACKAGE', "\"com.android.vending\""
    }

    signingConfigs {
        debug {
            def properties = getProperties("debug.properties")
            keyAlias properties['keyAlias']
            keyPassword properties['keyPassword']
            storeFile file(properties['storeFile'])
            storePassword properties['storePassword']
        }
        release {
            if (isReleaseKeystoreExists) {
                def properties = getProperties("upload.properties")
                keyAlias properties['keyAlias']
                keyPassword properties['keyPassword']
                storeFile file(properties['storeFile'])
                storePassword properties['storePassword']
            }
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            applicationIdSuffix ".debug"
        }
        staging {
            signingConfig signingConfigs.debug
            applicationIdSuffix ".staging"
        }
        release {
            signingConfig isReleaseKeystoreExists ? signingConfigs.release : signingConfigs.debug
        }
    }

    buildFeatures {
        buildConfig true
        viewBinding true
    }

    flavorDimensions "version"

    productFlavors {
        dev {
            dimension "version"
            applicationId "com.yugyd.quiz"

            buildConfigField 'String', 'PRO_APP_PACKAGE', "\"DEPRECATED\""
            // Replace with your resource
            buildConfigField 'String', 'PRIVACY_POLICY_LINK', "\"https://sites.google.com/view/yugyd/privacy-policy/quiz-platform\""
            // App use predefined database from assets
            buildConfigField 'boolean', 'IS_BASED_ON_PLATFORM_APP', "false"

            if (isGoogleServicesExists) {
                firebaseAppDistribution {
                    appId = providers.environmentVariable('FIREBASE_APP_ID').getOrNull()
                    artifactType = "AAB"
                    releaseNotesFile = "releasenotes.txt"
                    groups = "qa"
                    serviceCredentialsFile = "secret/firebase-credentials.json"
                }
            }
        }
    }

    namespace 'com.yugyd.quiz'
}

dependencies {
    // Module
    implementation project(':product:shared:data')
    implementation project(':product:designsystem:uikit')
    implementation project(':product:core:common-ui')
    implementation project(':product:core:navigation')
    implementation project(':product:core:featuretoggle')
    implementation project(':product:core')
    implementation project(':product:services:push')
    implementation project(':product:shared:domain-api')
    implementation project(':product:options:options-bl')
    implementation project(':product:update:update-bl')
    implementation project(':product:pro:pro-ui')
    implementation project(':product:correct:correct-ui')
    implementation project(':product:theme:theme-ui')
    implementation project(':product:section:section-ui')
    implementation project(':product:progress:progress-ui')
    implementation project(':product:game:game-ui')
    implementation project(':product:profile:profile-ui')
    implementation project(':product:main:main-ui')
    implementation project(':product:main:new-version-onboarding-ui')
    implementation project(':product:update:update-ui')
    implementation project(':product:errors:errors-ui')
    implementation project(':product:end:end-ui')
    implementation project(':product:profile:transition-ui')
    implementation project(':product:content:content-bl')
    implementation project(':product:content:content-ui')
    implementation project(':product:core:coroutines-utils')

    // Kotlin
    implementation libs.kotlinx.coroutines.android

    // UI - Compose
    implementation libs.compose.material3
    implementation libs.compose.activity
    implementation libs.compose.viewmodel
    implementation libs.compose.lifecycle
    // Accompanist
    implementation libs.accompanist.systemuicontroller
    implementation libs.accompanist.permissions
    // Navigation
    implementation libs.compose.navigation

    // UI - Android X
    implementation libs.core.ktx
    implementation libs.appcompat
    implementation libs.splashscreen

    // UI - Material
    implementation libs.material

    // UI - Lifecycle
    implementation libs.lifecycle.viewmodel.ktx
    implementation libs.lifecycle.runtime.ktx
    implementation libs.lifecycle.process

    // Room
    implementation libs.room.runtime
    implementation libs.room.ktx
    ksp libs.room.compiler

    // Firebase: Analytics, AppIndexing, Crashlytics, Cloud Messaging
    implementation platform(libs.firebase.bom)
    implementation libs.firebase.analytics
    implementation libs.firebase.crashlytics
    implementation libs.firebase.messages

    // Play Services: Ads, Auth, Games
    implementation libs.play.ads

    // Work Manager
    implementation libs.work.manager.ktx

    // Logging
    implementation libs.timber
}
